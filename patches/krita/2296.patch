From 7f6ee5c8c347299ada6566b5a2ad340b7ba0892b Mon Sep 17 00:00:00 2001
From: Dov Grobgeld <dov.grobgeld@gmail.com>
Date: Sat, 21 Dec 2024 23:03:05 +0200
Subject: [PATCH] Remove template-id-cdtor warnings in kis_shared_ptr.h and
 lut.h

---
 libs/global/kis_shared_ptr.h | 10 +++++-----
 libs/pigment/lut.h           |  6 +++---
 2 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/libs/global/kis_shared_ptr.h b/libs/global/kis_shared_ptr.h
index 862a1d62c6a..98493f65327 100644
--- a/libs/global/kis_shared_ptr.h
+++ b/libs/global/kis_shared_ptr.h
@@ -87,7 +87,7 @@ public:
      * Copies a pointer.
      * @param o the pointer to copy
      */
-    inline KisSharedPtr<T>(const KisSharedPtr<T>& o)
+    inline KisSharedPtr(const KisSharedPtr<T>& o)
             : d(o.d) {
         ref();
     }
@@ -100,7 +100,7 @@ public:
         deref();
     }
 
-    inline KisSharedPtr<T>& operator= (const KisSharedPtr& o) {
+    inline KisSharedPtr& operator= (const KisSharedPtr& o) {
         attach(o.d);
         return *this;
     }
@@ -254,7 +254,7 @@ public:
         load(p);
     }
 
-    inline KisWeakSharedPtr<T>(const KisSharedPtr<T>& o) {
+    inline KisWeakSharedPtr(const KisSharedPtr<T>& o) {
         load(o.d);
     }
 
@@ -262,7 +262,7 @@ public:
      * Copies a pointer.
      * @param o the pointer to copy
      */
-    inline KisWeakSharedPtr<T>(const KisWeakSharedPtr<T>& o) {
+    inline KisWeakSharedPtr(const KisWeakSharedPtr<T>& o) {
         if (o.isConsistent()) {
             load(o.d);
         }
@@ -276,7 +276,7 @@ public:
         detach();
     }
 
-    inline KisWeakSharedPtr<T>& operator= (const KisWeakSharedPtr& o) {
+    inline KisWeakSharedPtr& operator= (const KisWeakSharedPtr& o) {
         attach(o);
         return *this;
     }
diff --git a/libs/pigment/lut.h b/libs/pigment/lut.h
index 344bf111a4b..dcaa145c7b2 100644
--- a/libs/pigment/lut.h
+++ b/libs/pigment/lut.h
@@ -122,7 +122,7 @@ typedef uint32_t lut_uint32;
   template<>                                                                      \
   class LutKey<_INT_TYPE_> {                                               \
     public:                                                                       \
-      LutKey<_INT_TYPE_>(_INT_TYPE_ min, _INT_TYPE_ max) : m_min(min), m_max(max) \
+      LutKey(_INT_TYPE_ min, _INT_TYPE_ max) : m_min(min), m_max(max) \
       {                                                                           \
       }                                                                           \
     public:                                                                       \
@@ -162,7 +162,7 @@ PARTIAL_LUT_INT_SPECIALIZATION(lut_uint32)
   template<>                                                                      \
   class FullLutKey<_INT_TYPE_> {                                                  \
     public:                                                                       \
-      FullLutKey<_INT_TYPE_>()                                                    \
+      FullLutKey()                                                    \
       {                                                                           \
       }                                                                           \
     public:                                                                       \
@@ -212,7 +212,7 @@ class LutKey<float> {
       float f;
     };
   public:
-    LutKey<float>(float min, float max, float precision) : m_min(min), m_max(max), m_precision(precision)
+    LutKey(float min, float max, float precision) : m_min(min), m_max(max), m_precision(precision)
     {
       // Those values where computed using the test_linear and setting the shift and then using
       // the standard deviation.
-- 
GitLab
